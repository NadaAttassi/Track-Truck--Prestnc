import { getPlaceLabel } from '../utils/placeTypes';

// Mapping des types de lieux vers des emojis
const placeTypeToEmoji = {
  // Administratif
  administrative: 'üèõÔ∏è',
  
  // Commerces et services
  shop: 'üõçÔ∏è',
  supermarket: 'üõí',
  mall: 'üè¨',
  convenience: 'üè™',
  bakery: 'ü•ñ',
  butcher: 'ü•©',
  clothes: 'üëï',
  clothing: 'üëï',
  shoes: 'üëü',
  bank: 'üè¶',
  post_office: 'üìÆ',
  beauty_salon: 'üíá',
  hair_salon: 'üíá',
  hairdresser: 'üíá',
  bookstore: 'üìö',
  books: 'üìö',
  car_dealership: 'üöó',
  car_parts: 'üîß',
  auto_parts: 'üîß',
  electronics_store: 'üì±',
  mobile_phone: 'üì±',
  phone: 'üì±',
  furniture_store: 'üõãÔ∏è',
  grocery_store: 'üõí',
  grocery: 'üõí',
  hardware_store: 'üî®',
  hardware: 'üî®',
  market: 'üõí',
  pharmacy: 'üíä',
  services: 'üõ†Ô∏è',
  beauty: 'üíÑ',
  
  // Restauration
  restaurant: 'üçΩÔ∏è',
  cafe: '‚òï',
  'cafe;pharmacy': '‚òïüíä',
  fast_food: 'üçî',
  bar: 'üçª',
  pub: 'üç∫',
  
  // Transports
  aerodrome: '‚úàÔ∏è',
  airport: '‚úàÔ∏è',
  bus_station: 'üöå',
  bus_stop: 'üöè',
  train_station: 'üöâ',
  tram_stop: 'üöä',
  parking: 'üÖøÔ∏è',
  parking_entrance: 'üö™',
  parking_space: 'üÖøÔ∏è',
  fuel: '‚õΩ',
  gas_station: '‚õΩ',
  station: 'üöâ',
  stop: 'üöè',
  
  // H√©bergement
  hotel: 'üè®',
  tourism_guest_house: 'üè†',  // Chambre d'h√¥tes - ic√¥ne de maison plus visible
  guest_house: 'üè†',         // Alias pour chambre d'h√¥tes
  'tourism_guest_house;hotel': 'üè®',
  'tourism_camp_site;hotel': '‚õ∫',
  hostel: 'üõèÔ∏è',
  apartment: 'üè¢',
  bed_and_breakfast: 'üõå',  // Alternative pour chambre d'h√¥tes
  
  // Tourisme & Loisirs
  tourist_attraction: 'üèõÔ∏è',
  attraction: 'üèõÔ∏è',
  beach: 'üèñÔ∏è',
  castle: 'üè∞',
  cinema: 'üé¨',
  fountain: '‚õ≤',
  golf_course: '‚õ≥',
  memorial: 'ü™¶',
  monument: 'üóø',
  museum: 'üèõÔ∏è',
  park: 'üå≥',
  stadium: 'üèüÔ∏è',
  theater: 'üé≠',
  theatre: 'üé≠',
  information: '‚ÑπÔ∏è',
  tourist_info: '‚ÑπÔ∏è',
  
  // √âducation
  school: 'üè´',
  college: 'üéì',
  university: 'üéì',
  library: 'üìö',
  kindergarten: 'üë∂',
  educational_institution: 'üè´',
  language_school: 'üåê',
  music_school: 'üéµ',
  prep_school: 'üìö',
  
  // Sant√©
  hospital: 'üè•',
  clinic: 'üè•',
  doctor: 'üë®‚öïÔ∏è',
  dentist: 'ü¶∑',
  pharmacy: 'üíä',
  
  // Lieux de culte
  place_of_worship: 'üõê',
  church: '‚õ™',
  mosque: 'üïå',
  synagogue: 'üïç',
  
  // Lieux historiques
  historic: 'üèõÔ∏è',
  historic_archaeological_site: 'üè∫',
  historic_battlefield: '‚öîÔ∏è',
  historic_building: 'üèõÔ∏è',
  historic_church: '‚õ™',
  historic_city: 'üèôÔ∏è',
  historic_city_gate: 'üèõÔ∏è',
  historic_citywalls: 'üè∞',
  historic_fort: 'üè∞',
  historic_gate: 'üö™',
  historic_manor: 'üè∞',
  historic_technical_monument: '‚öôÔ∏è',
  historic_wayside_cross: '‚úùÔ∏è',
  historic_yes: 'üèõÔ∏è',
  ruins: 'üèöÔ∏è',
  
  // Autres
  community_centre: 'üë•',
  industrial: 'üè≠',
  internet_cafe: 'üíª',
  police_station: 'üëÆ',
  residential: 'üè†',
  shop_art: 'üé®',
  telephone: 'üìû',
  tourism_info: '‚ÑπÔ∏è',
  towing: 'üöõ',
  
  // Par d√©faut
  default: 'üìç'
};

const PlaceDetails = ({ placeDetails, showDetails, expandedCard, toggleCard, handleDirectionsClick, isCalculatingRoute, showRouteInfo }) => {
  if (!placeDetails || !showDetails) return null;

  // R√©cup√©rer l'emoji en fonction du type de lieu
  const getPlaceEmoji = () => {
    // V√©rifier d'abord les types sp√©cifiques
    const specificTypes = [
      placeDetails.shop,
      placeDetails.tourism,
      placeDetails.amenity,
      placeDetails.historic,
      placeDetails.aeroway,
      placeDetails.leisure,
      placeDetails.office,
      placeDetails.landuse
    ].filter(Boolean);
    
    for (const type of specificTypes) {
      if (placeTypeToEmoji[type]) {
        return placeTypeToEmoji[type];
      }
    }
    
    // V√©rifier les propri√©t√©s directes
    for (const [key, value] of Object.entries(placeDetails)) {
      if (key.startsWith('historic_') || key.endsWith('_station') || key.endsWith('_stop')) {
        if (placeTypeToEmoji[value]) {
          return placeTypeToEmoji[value];
        }
      }
    }
    
    // V√©rifier le type direct
    if (placeDetails.type) {
      const type = placeDetails.type.replace('tourism_', ''); // Enlever le pr√©fixe si pr√©sent
      if (placeTypeToEmoji[type]) {
        return placeTypeToEmoji[type];
      }
    }
    
    // V√©rifier le nom de la cat√©gorie
    if (placeDetails.category && placeTypeToEmoji[placeDetails.category]) {
      return placeTypeToEmoji[placeDetails.category];
    }
    
    return placeTypeToEmoji.default;
  };

  // R√©cup√©rer le libell√© du type de lieu en utilisant le m√™me mapping que SearchBar.js
  const getPlaceTypeLabel = () => {
    // Mapping des types de lieux avec leurs libell√©s (identique √† SearchBar.js)
    const placeTypeLabels = {
      // Administratif
      administrative: 'Administratif',
      
      // Commerces et services
      shop: 'Magasin',
      supermarket: 'Supermarch√©',
      mall: 'Centre commercial',
      convenience: '√âpicerie de proximit√©',
      bakery: 'Boulangerie',
      butcher: 'Boucherie',
      clothes: 'V√™tements',
      bank: 'Banque',
      post_office: 'Bureau de poste',
      beauty_salon: 'Institut de beaut√©',
      bookstore: 'Librairie',
      car_dealership: 'Concessionnaire',
      electronics_store: 'Magasin d\'√©lectronique',
      furniture_store: 'Magasin de meubles',
      grocery_store: '√âpicerie',
      hardware_store: 'Quincaillerie',
      market: 'March√©',
      pharmacy: 'Pharmacie',
      services: 'Services',
      
      // Restauration
      restaurant: 'Restaurant',
      cafe: 'Caf√©',
      fast_food: 'Restauration rapide',
      bar: 'Bar',
      pub: 'Pub',
      
      // Transports
      aerodrome: 'A√©rodrome',
      bus_station: 'Gare routi√®re',
      bus_stop: 'Arr√™t de bus',
      train_station: 'Gare ferroviaire',
      tram_stop: 'Arr√™t de tram',
      airport: 'A√©roport',
      parking: 'Parking',
      parking_entrance: 'Entr√©e parking',
      parking_space: 'Place de parking',
      fuel: 'Station essence',
      gas_station: 'Station essence',
      station: 'Gare',
      stop: 'Arr√™t',
      
      // H√©bergement
      hotel: 'H√¥tel',
      'tourism_guest_house': 'Chambre d\'h√¥tes',
      'tourism_guest_house;hotel': 'Chambre d\'h√¥tes/H√¥tel',
      'tourism_camp_site;hotel': 'Camping/H√¥tel',
      hostel: 'Auberge de jeunesse',
      
      // Tourisme & Loisirs
      tourist_attraction: 'Attraction touristique',
      beach: 'Plage',
      castle: 'Ch√¢teau',
      cinema: 'Cin√©ma',
      fountain: 'Fontaine',
      golf_course: 'Terrain de golf',
      memorial: 'M√©morial',
      monument: 'Monument',
      museum: 'Mus√©e',
      park: 'Parc',
      stadium: 'Stade',
      theater: 'Th√©√¢tre',
      theatre: 'Th√©√¢tre',
      
      // √âducation
      school: '√âcole',
      college: 'Coll√®ge',
      university: 'Universit√©',
      library: 'Biblioth√®que',
      kindergarten: '√âcole maternelle',
      educational_institution: '√âtablissement scolaire',
      language_school: '√âcole de langues',
      music_school: '√âcole de musique',
      prep_school: '√âcole pr√©paratoire',
      
      // Sant√©
      hospital: 'H√¥pital',
      doctor: 'M√©decin',
      dentist: 'Dentiste',
      
      // Lieux historiques
      historic: 'Site historique',
      historic_archaeological_site: 'Site arch√©ologique',
      historic_battlefield: 'Champ de bataille',
      historic_building: 'B√¢timent historique',
      historic_church: '√âglise historique',
      historic_city: 'Ville historique',
      historic_city_gate: 'Porte de ville',
      historic_citywalls: 'Remparts',
      historic_fort: 'Fort',
      historic_gate: 'Porte',
      historic_manor: 'Manoir',
      historic_technical_monument: 'Monument technique',
      historic_wayside_cross: 'Croix de chemin',
      historic_yes: 'Site historique',
      ruins: 'Ruines',
      
      // Autres
      community_centre: 'Centre communautaire',
      industrial: 'Zone industrielle',
      internet_cafe: 'Cybercaf√©',
      police_station: 'Commissariat',
      residential: 'R√©sidentiel',
      shop_art: 'Magasin d\'art',
      telephone: 'T√©l√©phone',
      tourism_info: 'Office de tourisme',
      towing: 'D√©pannage',
      
      // Par d√©faut
      default: 'Lieu'
    };

    // Essayer de trouver le libell√© en fonction du type de lieu
    const type = placeDetails.type || '';
    if (placeTypeLabels[type]) {
      return placeTypeLabels[type];
    }
    
    // V√©rifier les cat√©gories communes
    const categories = ['shop', 'tourism', 'amenity', 'historic', 'aeroway', 'leisure'];
    for (const category of categories) {
      if (placeDetails[category] && placeTypeLabels[`${category}_${placeDetails[category]}`]) {
        return placeTypeLabels[`${category}_${placeDetails[category]}`];
      }
      if (placeDetails[category] && placeTypeLabels[placeDetails[category]]) {
        return placeTypeLabels[placeDetails[category]];
      }
    }
    
    // V√©rifier les propri√©t√©s directes
    for (const [key, value] of Object.entries(placeDetails)) {
      if (placeTypeLabels[value]) {
        return placeTypeLabels[value];
      }
      if (key.startsWith('tourism_') && placeTypeLabels[value]) {
        return placeTypeLabels[value];
      }
    }
    
    return placeTypeLabels.default;
  };

  const emoji = getPlaceEmoji();
  const label = getPlaceTypeLabel();
  const isExpanded = expandedCard === 'place';
  
  return (
    <div 
      className="place-details-container"
      style={{
        position: "fixed",
        top: "0",
        right: "0",
        width: isExpanded ? "250px" : "40px",
        height: "180px",
        background: "#fff",
        borderRadius: "0 0 0 10px",
        boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
        zIndex: 998,
        display: "flex",
        transition: "all 0.3s ease",
        overflow: "hidden",
        marginBottom: "10px"
      }}
    >
      {/* Header vertical */}
      <div
        onClick={() => toggleCard('place')}
        style={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          width: "40px",
          height: "100%",
          background: "linear-gradient(180deg, #0056b3, #dc3545)",
          cursor: "pointer",
          fontWeight: "500",
          fontSize: "14px",
          color: "#fff",
          writingMode: "vertical-rl",
          textOrientation: "mixed",
          padding: "15px 5px",
          flexShrink: 0
        }}
      >
        <span style={{
          transform: "rotate(180deg)",
          whiteSpace: "nowrap",
          marginBottom: "10px",
          fontSize: "13px"
        }}>D√©stination</span>
        <span style={{ 
          fontSize: "14px", 
          transform: "rotate(180deg)",
          fontWeight: "bold"
        }}>{isExpanded ? "‚óÑ" : "‚ñ∫"}</span>
      </div>

      {/* Contenu */}
      <div style={{ 
        padding: "15px", 
        flex: 1,
        overflowY: "auto",
        display: isExpanded ? "flex" : "none",
        flexDirection: "column",
        gap: "12px"
      }}>
        {/* En-t√™te avec emoji et nom */}
        <div style={{ 
          display: "flex",
          alignItems: "flex-start",
          gap: "12px",
          paddingBottom: "10px",
          borderBottom: "1px solid #f0f0f0"
        }}>
          <div style={{
            width: "40px",
            height: "40px",
            borderRadius: "8px",
            backgroundColor: "#f0f7ff",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            fontSize: "20px"
          }}>
            {emoji}
          </div>
          <div style={{ flex: 1, minWidth: 0 }}>
            <h3 style={{ 
              margin: "0 0 2px 0",
              fontSize: "16px",
              color: "#1a1a1a",
              fontWeight: "600",
              whiteSpace: "nowrap",
              overflow: "hidden",
              textOverflow: "ellipsis"
            }}>
              {placeDetails.name || "Destination personnalis√©e"}
            </h3>
            <p style={{ 
              margin: "0",
              fontSize: "13px",
              color: "#4a6cf7",
              fontWeight: "500"
            }}>
              {label}
            </p>
          </div>
        </div>


        {/* Coordonn√©es compactes */}
        <div style={{
          backgroundColor: "#f8f9fa",
          padding: "8px 10px",
          borderRadius: "6px",
          border: "1px solid #e9ecef",
          fontSize: "12px",
          color: "#495057"
        }}>
          <div style={{
            display: "flex",
            alignItems: "center",
            gap: "10px"
          }}>
            <span>Lat: <span style={{ fontFamily: "monospace" }}>{Number(placeDetails.lat).toFixed(6)}</span></span>
            <span style={{ color: "#dee2e6" }}>|</span>
            <span>Lon: <span style={{ fontFamily: "monospace" }}>{Number(placeDetails.lon).toFixed(6)}</span></span>
          </div>
        </div>

        {/* Bouton d'action principal */}
        <button
          onClick={handleDirectionsClick}
          disabled={isCalculatingRoute}
          style={{
            width: "100%",
            padding: "12px",
            backgroundColor: showRouteInfo ? "#dc3545" : "#007bff",
            background: showRouteInfo 
              ? "linear-gradient(135deg, #dc3545, #c82333)" 
              : "linear-gradient(135deg, #007bff, #0056b3)",
            color: "white",
            border: "none",
            borderRadius: "8px",
            cursor: isCalculatingRoute ? "wait" : "pointer",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            gap: "10px",
            fontSize: "14px",
            fontWeight: "600",
            transition: "all 0.2s ease",
            opacity: isCalculatingRoute ? 0.8 : 1,
            marginTop: "auto",
            boxShadow: "0 2px 8px rgba(0, 0, 0, 0.15)",
            position: "relative",
            overflow: "hidden"
          }}
          onMouseOver={e => {
            if (!isCalculatingRoute) {
              e.currentTarget.style.transform = "translateY(-1px)";
              e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 0, 0, 0.2)";
            }
          }}
          onMouseOut={e => {
            e.currentTarget.style.transform = "translateY(0)";
            e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.15)";
          }}
          onMouseDown={e => {
            if (!isCalculatingRoute) {
              e.currentTarget.style.transform = "translateY(1px)";
            }
          }}
          onMouseUp={e => {
            if (!isCalculatingRoute) {
              e.currentTarget.style.transform = "translateY(-1px)";
            }
          }}
        >
          <span style={{
            fontSize: "16px",
            transition: "transform 0.2s ease"
          }}>
            {showRouteInfo ? "üö´" : "üöó"}
          </span>
          <span>
            {isCalculatingRoute 
              ? "Calcul en cours..." 
              : showRouteInfo 
                ? "Masquer l'itin√©raire" 
                : "Itin√©raire"}
          </span>
        </button>
      </div>
    </div>
  );
};

export default PlaceDetails;